apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.dxc.mycollector"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
//        multiDexEnabled true
        // 不声明ndk标签,项目默认会创建一个libapp.so的文件
        ndk {
            // 声明创建so库的文件名,会自动添加lib前缀, 添加了前缀,不会自动添加
            moduleName "libgstarcadmc"
            //声明启用Android日志, 在c/c++的源文件中使用的#include <android/log.h> 日志将得到输出
            ldLibs "log"
            // 声明创建指定cpu架构的so库, 不声明的话, 默认(gradle 1.5.0)会生成4中架构 多一种mips架构
            // 具体cpu架构的区别请参考:
            // for detailed abiFilter descriptions, refer to "Supported ABIs" @
            // https://developer.android.com/ndk/guides/abis.html#sa
            abiFilters "arm64-v8a", "armeabi-v7a"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            // 1. 配置在根目录libs下可以加载第三方so库, (最好不要创建jniLibs, 在众多的开源库中可能会引起冲突,还没发现)
            // 2. 运行时会自动将libs目录下的so库拷贝到指定目录
            // 3. 如果自己创建的so不需要重新编译,可以将(app/build/intermediates/transforms)生成的so拷贝到这个目录
            jniLibs.srcDirs = ['libs']
            // 如果是单个文件夹 可以直接这样如下配置
            // jniLibs.srcDir 'libs'
            res.srcDirs = [
                    'src/main/res/layouts/cad_layout',
                    'src/main/res/layouts/fragment_layout',
                    'src/main/res/layouts/pull_layout',
                    'src/main/res/layouts/layout-land',
                    'src/main/res/layouts/layout-port',
                    'src/main/res/layouts/layout',
                    'src/main/res/layouts',
                    'src/main/res'
            ]
        }
    }
    android {
        useLibrary 'org.apache.http.legacy'
    }
    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
    }
    dexOptions {
        keepRuntimeAnnotatedClasses false
        jumboMode true
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile files('libs/jsoup-1.8.1.jar')
    compile files('libs/gson-2.6.2.jar')
    compile files('libs/GstarSDK.jar')
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:design:23.4.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha7'
    compile 'com.ashokvarma.android:bottom-navigation-bar:1.3.1'
    testCompile 'junit:junit:4.12'
}
